// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcz.proto

#ifndef PROTOBUF_rpcz_2eproto__INCLUDED
#define PROTOBUF_rpcz_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rpcz {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcz_2eproto();
void protobuf_AssignDesc_rpcz_2eproto();
void protobuf_ShutdownFile_rpcz_2eproto();

class RpcRequestHeader;
class RpcResponseHeader;

enum RpcResponseHeader_Status {
  RpcResponseHeader_Status_INACTIVE = 0,
  RpcResponseHeader_Status_ACTIVE = 1,
  RpcResponseHeader_Status_OK = 2,
  RpcResponseHeader_Status_CANCELLED = 3,
  RpcResponseHeader_Status_APPLICATION_ERROR = 4,
  RpcResponseHeader_Status_DEADLINE_EXCEEDED = 5,
  RpcResponseHeader_Status_TERMINATED = 6
};
bool RpcResponseHeader_Status_IsValid(int value);
const RpcResponseHeader_Status RpcResponseHeader_Status_Status_MIN = RpcResponseHeader_Status_INACTIVE;
const RpcResponseHeader_Status RpcResponseHeader_Status_Status_MAX = RpcResponseHeader_Status_TERMINATED;
const int RpcResponseHeader_Status_Status_ARRAYSIZE = RpcResponseHeader_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcResponseHeader_Status_descriptor();
inline const ::std::string& RpcResponseHeader_Status_Name(RpcResponseHeader_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcResponseHeader_Status_descriptor(), value);
}
inline bool RpcResponseHeader_Status_Parse(
    const ::std::string& name, RpcResponseHeader_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcResponseHeader_Status>(
    RpcResponseHeader_Status_descriptor(), name, value);
}
enum RpcResponseHeader_ApplicationError {
  RpcResponseHeader_ApplicationError_NO_ERROR = 0,
  RpcResponseHeader_ApplicationError_INVALID_HEADER = -1,
  RpcResponseHeader_ApplicationError_NO_SUCH_SERVICE = -2,
  RpcResponseHeader_ApplicationError_NO_SUCH_METHOD = -3,
  RpcResponseHeader_ApplicationError_INVALID_MESSAGE = -4,
  RpcResponseHeader_ApplicationError_METHOD_NOT_IMPLEMENTED = -5
};
bool RpcResponseHeader_ApplicationError_IsValid(int value);
const RpcResponseHeader_ApplicationError RpcResponseHeader_ApplicationError_ApplicationError_MIN = RpcResponseHeader_ApplicationError_METHOD_NOT_IMPLEMENTED;
const RpcResponseHeader_ApplicationError RpcResponseHeader_ApplicationError_ApplicationError_MAX = RpcResponseHeader_ApplicationError_NO_ERROR;
const int RpcResponseHeader_ApplicationError_ApplicationError_ARRAYSIZE = RpcResponseHeader_ApplicationError_ApplicationError_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcResponseHeader_ApplicationError_descriptor();
inline const ::std::string& RpcResponseHeader_ApplicationError_Name(RpcResponseHeader_ApplicationError value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcResponseHeader_ApplicationError_descriptor(), value);
}
inline bool RpcResponseHeader_ApplicationError_Parse(
    const ::std::string& name, RpcResponseHeader_ApplicationError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcResponseHeader_ApplicationError>(
    RpcResponseHeader_ApplicationError_descriptor(), name, value);
}
// ===================================================================

class RpcRequestHeader : public ::google::protobuf::Message {
 public:
  RpcRequestHeader();
  virtual ~RpcRequestHeader();
  
  RpcRequestHeader(const RpcRequestHeader& from);
  
  inline RpcRequestHeader& operator=(const RpcRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequestHeader& default_instance();
  
  void Swap(RpcRequestHeader* other);
  
  // implements Message ----------------------------------------------
  
  RpcRequestHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequestHeader& from);
  void MergeFrom(const RpcRequestHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int64 event_id() const;
  inline void set_event_id(::google::protobuf::int64 value);
  
  // optional int32 deadline = 2;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 2;
  inline ::google::protobuf::int32 deadline() const;
  inline void set_deadline(::google::protobuf::int32 value);
  
  // optional string service = 3;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 3;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  
  // optional string method = 4;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 4;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // @@protoc_insertion_point(class_scope:rpcz.RpcRequestHeader)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 event_id_;
  ::std::string* service_;
  ::std::string* method_;
  ::google::protobuf::int32 deadline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpcz_2eproto();
  friend void protobuf_AssignDesc_rpcz_2eproto();
  friend void protobuf_ShutdownFile_rpcz_2eproto();
  
  void InitAsDefaultInstance();
  static RpcRequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponseHeader : public ::google::protobuf::Message {
 public:
  RpcResponseHeader();
  virtual ~RpcResponseHeader();
  
  RpcResponseHeader(const RpcResponseHeader& from);
  
  inline RpcResponseHeader& operator=(const RpcResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponseHeader& default_instance();
  
  void Swap(RpcResponseHeader* other);
  
  // implements Message ----------------------------------------------
  
  RpcResponseHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponseHeader& from);
  void MergeFrom(const RpcResponseHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RpcResponseHeader_Status Status;
  static const Status INACTIVE = RpcResponseHeader_Status_INACTIVE;
  static const Status ACTIVE = RpcResponseHeader_Status_ACTIVE;
  static const Status OK = RpcResponseHeader_Status_OK;
  static const Status CANCELLED = RpcResponseHeader_Status_CANCELLED;
  static const Status APPLICATION_ERROR = RpcResponseHeader_Status_APPLICATION_ERROR;
  static const Status DEADLINE_EXCEEDED = RpcResponseHeader_Status_DEADLINE_EXCEEDED;
  static const Status TERMINATED = RpcResponseHeader_Status_TERMINATED;
  static inline bool Status_IsValid(int value) {
    return RpcResponseHeader_Status_IsValid(value);
  }
  static const Status Status_MIN =
    RpcResponseHeader_Status_Status_MIN;
  static const Status Status_MAX =
    RpcResponseHeader_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    RpcResponseHeader_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return RpcResponseHeader_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return RpcResponseHeader_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return RpcResponseHeader_Status_Parse(name, value);
  }
  
  typedef RpcResponseHeader_ApplicationError ApplicationError;
  static const ApplicationError NO_ERROR = RpcResponseHeader_ApplicationError_NO_ERROR;
  static const ApplicationError INVALID_HEADER = RpcResponseHeader_ApplicationError_INVALID_HEADER;
  static const ApplicationError NO_SUCH_SERVICE = RpcResponseHeader_ApplicationError_NO_SUCH_SERVICE;
  static const ApplicationError NO_SUCH_METHOD = RpcResponseHeader_ApplicationError_NO_SUCH_METHOD;
  static const ApplicationError INVALID_MESSAGE = RpcResponseHeader_ApplicationError_INVALID_MESSAGE;
  static const ApplicationError METHOD_NOT_IMPLEMENTED = RpcResponseHeader_ApplicationError_METHOD_NOT_IMPLEMENTED;
  static inline bool ApplicationError_IsValid(int value) {
    return RpcResponseHeader_ApplicationError_IsValid(value);
  }
  static const ApplicationError ApplicationError_MIN =
    RpcResponseHeader_ApplicationError_ApplicationError_MIN;
  static const ApplicationError ApplicationError_MAX =
    RpcResponseHeader_ApplicationError_ApplicationError_MAX;
  static const int ApplicationError_ARRAYSIZE =
    RpcResponseHeader_ApplicationError_ApplicationError_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ApplicationError_descriptor() {
    return RpcResponseHeader_ApplicationError_descriptor();
  }
  static inline const ::std::string& ApplicationError_Name(ApplicationError value) {
    return RpcResponseHeader_ApplicationError_Name(value);
  }
  static inline bool ApplicationError_Parse(const ::std::string& name,
      ApplicationError* value) {
    return RpcResponseHeader_ApplicationError_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rpcz.RpcResponseHeader.Status status = 1 [default = OK];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::rpcz::RpcResponseHeader_Status status() const;
  inline void set_status(::rpcz::RpcResponseHeader_Status value);
  
  // optional int32 application_error = 2 [default = 0];
  inline bool has_application_error() const;
  inline void clear_application_error();
  static const int kApplicationErrorFieldNumber = 2;
  inline ::google::protobuf::int32 application_error() const;
  inline void set_application_error(::google::protobuf::int32 value);
  
  // optional string error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  
  // @@protoc_insertion_point(class_scope:rpcz.RpcResponseHeader)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_application_error();
  inline void clear_has_application_error();
  inline void set_has_error();
  inline void clear_has_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int status_;
  ::google::protobuf::int32 application_error_;
  ::std::string* error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpcz_2eproto();
  friend void protobuf_AssignDesc_rpcz_2eproto();
  friend void protobuf_ShutdownFile_rpcz_2eproto();
  
  void InitAsDefaultInstance();
  static RpcResponseHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcRequestHeader

// optional int64 event_id = 1;
inline bool RpcRequestHeader::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequestHeader::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequestHeader::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequestHeader::clear_event_id() {
  event_id_ = GOOGLE_LONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::int64 RpcRequestHeader::event_id() const {
  return event_id_;
}
inline void RpcRequestHeader::set_event_id(::google::protobuf::int64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 deadline = 2;
inline bool RpcRequestHeader::has_deadline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequestHeader::set_has_deadline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequestHeader::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequestHeader::clear_deadline() {
  deadline_ = 0;
  clear_has_deadline();
}
inline ::google::protobuf::int32 RpcRequestHeader::deadline() const {
  return deadline_;
}
inline void RpcRequestHeader::set_deadline(::google::protobuf::int32 value) {
  set_has_deadline();
  deadline_ = value;
}

// optional string service = 3;
inline bool RpcRequestHeader::has_service() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequestHeader::set_has_service() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequestHeader::clear_has_service() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequestHeader::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& RpcRequestHeader::service() const {
  return *service_;
}
inline void RpcRequestHeader::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcRequestHeader::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcRequestHeader::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequestHeader::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* RpcRequestHeader::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string method = 4;
inline bool RpcRequestHeader::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcRequestHeader::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcRequestHeader::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcRequestHeader::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RpcRequestHeader::method() const {
  return *method_;
}
inline void RpcRequestHeader::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcRequestHeader::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcRequestHeader::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequestHeader::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RpcRequestHeader::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcResponseHeader

// optional .rpcz.RpcResponseHeader.Status status = 1 [default = OK];
inline bool RpcResponseHeader::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponseHeader::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponseHeader::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponseHeader::clear_status() {
  status_ = 2;
  clear_has_status();
}
inline ::rpcz::RpcResponseHeader_Status RpcResponseHeader::status() const {
  return static_cast< ::rpcz::RpcResponseHeader_Status >(status_);
}
inline void RpcResponseHeader::set_status(::rpcz::RpcResponseHeader_Status value) {
  GOOGLE_DCHECK(::rpcz::RpcResponseHeader_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 application_error = 2 [default = 0];
inline bool RpcResponseHeader::has_application_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponseHeader::set_has_application_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponseHeader::clear_has_application_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponseHeader::clear_application_error() {
  application_error_ = 0;
  clear_has_application_error();
}
inline ::google::protobuf::int32 RpcResponseHeader::application_error() const {
  return application_error_;
}
inline void RpcResponseHeader::set_application_error(::google::protobuf::int32 value) {
  set_has_application_error();
  application_error_ = value;
}

// optional string error = 3;
inline bool RpcResponseHeader::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcResponseHeader::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcResponseHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcResponseHeader::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& RpcResponseHeader::error() const {
  return *error_;
}
inline void RpcResponseHeader::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void RpcResponseHeader::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void RpcResponseHeader::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponseHeader::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* RpcResponseHeader::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcz

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcz::RpcResponseHeader_Status>() {
  return ::rpcz::RpcResponseHeader_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcz::RpcResponseHeader_ApplicationError>() {
  return ::rpcz::RpcResponseHeader_ApplicationError_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcz_2eproto__INCLUDED
