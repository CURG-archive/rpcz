// Copyright 2011, Nadav Samet.
// All rights reserved.
//
// Author: thesamet@gmail.com <Nadav Samet>

#include "zrpc/plugin/cpp/cpp_helpers.h"
#include "zrpc/plugin/cpp/file_generator.h"
#include "zrpc/plugin/cpp/zrpc_cpp_service.h"
#include "zrpc/plugin/common/strutil.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/printer.h>

namespace zrpc {
namespace plugin {
namespace cpp {

using std::string;
using namespace ::google::protobuf;
using namespace google::protobuf::compiler::cpp;

FileGenerator::FileGenerator(const FileDescriptor* file,
                             const string& dllexport_decl)
    : file_(file), dllexport_decl_(dllexport_decl) {
  SplitStringUsing(file_->package(), ".", &package_parts_);
}

void FileGenerator::GenerateHeader(io::Printer* printer) {
  string filename_identifier = FilenameIdentifier(file_->name());

  printer->Print(
    "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
    "// source: $filename$\n"
    "\n"
    "#ifndef ZRPC_$filename_identifier$__INCLUDED\n"
    "#define ZRPC_$filename_identifier$__INCLUDED\n"
    "\n"
    "#include <string>\n"
    "\n",
    "filename", file_->name(),
    "filename_identifier", filename_identifier);

  for (int i = 0; i < file_->dependency_count(); i++) {
    printer->Print(
      "#include \"$dependency$.pb.h\"\n",
      "dependency", StripProto(file_->dependency(i)->name()));
  }

  printer->Print(
      "#include \"$dependency$.pb.h\"\n",
      "dependency", StripProto(file_->name()));

  GenerateNamespaceOpeners(printer);

  for (int i = 0; i < file_->service_count(); i++) {
    ServiceGenerator sg(file_->service(i), dllexport_decl_);
    sg.GenerateDeclarations(printer);
  }

  GenerateNamespaceClosers(printer);
  printer->Print(
    "#endif  // ZRPC_$filename_identifier$__INCLUDED\n",
    "filename_identifier", filename_identifier);
}

void FileGenerator::GenerateSource(io::Printer* printer) {
  GenerateNamespaceOpeners(printer);
  GenerateNamespaceClosers(printer);
}

void FileGenerator::GenerateNamespaceOpeners(io::Printer* printer) {
  if (package_parts_.size() > 0) printer->Print("\n");

  for (int i = 0; i < package_parts_.size(); i++) {
    printer->Print("namespace $part$ {\n",
                   "part", package_parts_[i]);
  }
}

void FileGenerator::GenerateNamespaceClosers(io::Printer* printer) {
  if (package_parts_.size() > 0) printer->Print("\n");

  for (int i = package_parts_.size() - 1; i >= 0; i--) {
    printer->Print("}  // namespace $part$\n",
                   "part", package_parts_[i]);
  }
}

}  // namespace cpp
}  // namespace plugin
}  // namespace zrpc
